import { Either, left, right } from 'fp-ts/Either';
import { z } from 'zod';

// ============ Schemas ============
/**
 * API Response Schema - Validates external API data (snake_case)
 */
const ElementResponseSchema = z.object({
  chance_of_playing_next_round: z.nullable(z.number()),
  chance_of_playing_this_round: z.nullable(z.number()),
  code: z.number(),
  cost_change_event: z.number(),
  cost_change_event_fall: z.number(),
  cost_change_start: z.number(),
  cost_change_start_fall: z.number(),
  dreamteam_count: z.number(),
  element_type: z.number(),
  ep_next: z.nullable(z.string()),
  ep_this: z.nullable(z.string()),
  event_points: z.number(),
  first_name: z.string(),
  form: z.nullable(z.string()),
  id: z.number(),
  in_dreamteam: z.boolean(),
  news: z.string(),
  news_added: z.nullable(z.string()),
  now_cost: z.number(),
  photo: z.string(),
  points_per_game: z.string(),
  second_name: z.string(),
  selected_by_percent: z.string(),
  special: z.boolean(),
  squad_number: z.nullable(z.number()),
  status: z.string(),
  team: z.number(),
  team_code: z.number(),
  total_points: z.number(),
  transfers_in: z.number(),
  transfers_in_event: z.number(),
  transfers_out: z.number(),
  transfers_out_event: z.number(),
  value_form: z.string(),
  value_season: z.string(),
  web_name: z.string(),
  minutes: z.number(),
  goals_scored: z.number(),
  assists: z.number(),
  clean_sheets: z.number(),
  goals_conceded: z.number(),
  own_goals: z.number(),
  penalties_saved: z.number(),
  penalties_missed: z.number(),
  yellow_cards: z.number(),
  red_cards: z.number(),
  saves: z.number(),
  bonus: z.number(),
  bps: z.number(),
  influence: z.string(),
  creativity: z.string(),
  threat: z.string(),
  ict_index: z.string(),
  starts: z.number(),
  expected_goals: z.string(),
  expected_assists: z.string(),
  expected_goal_involvements: z.string(),
  expected_goals_conceded: z.string(),
  influence_rank: z.nullable(z.number()),
  influence_rank_type: z.nullable(z.number()),
  creativity_rank: z.nullable(z.number()),
  creativity_rank_type: z.nullable(z.number()),
  threat_rank: z.nullable(z.number()),
  threat_rank_type: z.nullable(z.number()),
  ict_index_rank: z.nullable(z.number()),
  ict_index_rank_type: z.nullable(z.number()),
  corners_and_indirect_freekicks_order: z.nullable(z.number()),
  corners_and_indirect_freekicks_text: z.string(),
  direct_freekicks_order: z.nullable(z.number()),
  direct_freekicks_text: z.string(),
  penalties_order: z.nullable(z.number()),
  penalties_text: z.string(),
  expected_goals_per_90: z.number(),
  saves_per_90: z.number(),
  expected_assists_per_90: z.number(),
  expected_goal_involvements_per_90: z.number(),
  expected_goals_conceded_per_90: z.number(),
  goals_conceded_per_90: z.number(),
  now_cost_rank: z.nullable(z.number()),
  now_cost_rank_type: z.nullable(z.number()),
  form_rank: z.nullable(z.number()),
  form_rank_type: z.nullable(z.number()),
  points_per_game_rank: z.nullable(z.number()),
  points_per_game_rank_type: z.nullable(z.number()),
  selected_rank: z.nullable(z.number()),
  selected_rank_type: z.nullable(z.number()),
  starts_per_90: z.number(),
  clean_sheets_per_90: z.number(),
});

/**
 * Domain Schema - Internal application model (camelCase)
 */
const ElementSchema = z.object({
  chanceOfPlayingNextRound: z.nullable(z.number()),
  chanceOfPlayingThisRound: z.nullable(z.number()),
  code: z.number(),
  costChangeEvent: z.number(),
  costChangeEventFall: z.number(),
  costChangeStart: z.number(),
  costChangeStartFall: z.number(),
  dreamteamCount: z.number(),
  elementType: z.number(),
  epNext: z.nullable(z.string()),
  epThis: z.nullable(z.string()),
  eventPoints: z.number(),
  firstName: z.string(),
  form: z.nullable(z.string()),
  id: z.number(),
  inDreamteam: z.boolean(),
  news: z.string(),
  newsAdded: z.nullable(z.string()),
  nowCost: z.number(),
  photo: z.string(),
  pointsPerGame: z.string(),
  secondName: z.string(),
  selectedByPercent: z.string(),
  special: z.boolean(),
  squadNumber: z.nullable(z.number()),
  status: z.string(),
  team: z.number(),
  teamCode: z.number(),
  totalPoints: z.number(),
  transfersIn: z.number(),
  transfersInEvent: z.number(),
  transfersOut: z.number(),
  transfersOutEvent: z.number(),
  valueForm: z.string(),
  valueSeason: z.string(),
  webName: z.string(),
  minutes: z.number(),
  goalsScored: z.number(),
  assists: z.number(),
  cleanSheets: z.number(),
  goalsConceded: z.number(),
  ownGoals: z.number(),
  penaltiesSaved: z.number(),
  penaltiesMissed: z.number(),
  yellowCards: z.number(),
  redCards: z.number(),
  saves: z.number(),
  bonus: z.number(),
  bps: z.number(),
  influence: z.string(),
  creativity: z.string(),
  threat: z.string(),
  ictIndex: z.string(),
  starts: z.number(),
  expectedGoals: z.string(),
  expectedAssists: z.string(),
  expectedGoalInvolvements: z.string(),
  expectedGoalsConceded: z.string(),
  influenceRank: z.nullable(z.number()),
  influenceRankType: z.nullable(z.number()),
  creativityRank: z.nullable(z.number()),
  creativityRankType: z.nullable(z.number()),
  threatRank: z.nullable(z.number()),
  threatRankType: z.nullable(z.number()),
  ictIndexRank: z.nullable(z.number()),
  ictIndexRankType: z.nullable(z.number()),
  cornersAndIndirectFreekicksOrder: z.nullable(z.number()),
  cornersAndIndirectFreekicksText: z.string(),
  directFreekicksOrder: z.nullable(z.number()),
  directFreekicksText: z.string(),
  penaltiesOrder: z.nullable(z.number()),
  penaltiesText: z.string(),
  expectedGoalsPer90: z.number(),
  savesPer90: z.number(),
  expectedAssistsPer90: z.number(),
  expectedGoalInvolvementsPer90: z.number(),
  expectedGoalsConcededPer90: z.number(),
  goalsConcededPer90: z.number(),
  nowCostRank: z.nullable(z.number()),
  nowCostRankType: z.nullable(z.number()),
  formRank: z.nullable(z.number()),
  formRankType: z.nullable(z.number()),
  pointsPerGameRank: z.nullable(z.number()),
  pointsPerGameRankType: z.nullable(z.number()),
  selectedRank: z.nullable(z.number()),
  selectedRankType: z.nullable(z.number()),
  startsPer90: z.number(),
  cleanSheetsPer90: z.number(),
});

export const ElementsSchema = z.array(ElementSchema);
export const ElementsResponseSchema = z.array(ElementResponseSchema);

// ============ Types ============
/**
 * API Response types (snake_case)
 */
export type ElementResponse = z.infer<typeof ElementResponseSchema>;
export type ElementsResponse = z.infer<typeof ElementsResponseSchema>;

/**
 * Domain types (camelCase)
 */
export type Element = z.infer<typeof ElementSchema>;
export type Elements = z.infer<typeof ElementsSchema>;

// ============ Type Transformers ============
/**
 * Transform and validate ElementResponse to Element
 */
export const toDomainElement = (raw: ElementResponse): Either<string, Element> => {
  try {
    const result = ElementSchema.safeParse({
      chanceOfPlayingNextRound: raw.chance_of_playing_next_round,
      chanceOfPlayingThisRound: raw.chance_of_playing_this_round,
      code: raw.code,
      costChangeEvent: raw.cost_change_event,
      costChangeEventFall: raw.cost_change_event_fall,
      costChangeStart: raw.cost_change_start,
      costChangeStartFall: raw.cost_change_start_fall,
      dreamteamCount: raw.dreamteam_count,
      elementType: raw.element_type,
      epNext: raw.ep_next,
      epThis: raw.ep_this,
      eventPoints: raw.event_points,
      firstName: raw.first_name,
      form: raw.form,
      id: raw.id,
      inDreamteam: raw.in_dreamteam,
      news: raw.news,
      newsAdded: raw.news_added,
      nowCost: raw.now_cost,
      photo: raw.photo,
      pointsPerGame: raw.points_per_game,
      secondName: raw.second_name,
      selectedByPercent: raw.selected_by_percent,
      special: raw.special,
      squadNumber: raw.squad_number,
      status: raw.status,
      team: raw.team,
      teamCode: raw.team_code,
      totalPoints: raw.total_points,
      transfersIn: raw.transfers_in,
      transfersInEvent: raw.transfers_in_event,
      transfersOut: raw.transfers_out,
      transfersOutEvent: raw.transfers_out_event,
      valueForm: raw.value_form,
      valueSeason: raw.value_season,
      webName: raw.web_name,
      minutes: raw.minutes,
      goalsScored: raw.goals_scored,
      assists: raw.assists,
      cleanSheets: raw.clean_sheets,
      goalsConceded: raw.goals_conceded,
      ownGoals: raw.own_goals,
      penaltiesSaved: raw.penalties_saved,
      penaltiesMissed: raw.penalties_missed,
      yellowCards: raw.yellow_cards,
      redCards: raw.red_cards,
      saves: raw.saves,
      bonus: raw.bonus,
      bps: raw.bps,
      influence: raw.influence,
      creativity: raw.creativity,
      threat: raw.threat,
      ictIndex: raw.ict_index,
      starts: raw.starts,
      expectedGoals: raw.expected_goals,
      expectedAssists: raw.expected_assists,
      expectedGoalInvolvements: raw.expected_goal_involvements,
      expectedGoalsConceded: raw.expected_goals_conceded,
      influenceRank: raw.influence_rank,
      influenceRankType: raw.influence_rank_type,
      creativityRank: raw.creativity_rank,
      creativityRankType: raw.creativity_rank_type,
      threatRank: raw.threat_rank,
      threatRankType: raw.threat_rank_type,
      ictIndexRank: raw.ict_index_rank,
      ictIndexRankType: raw.ict_index_rank_type,
      cornersAndIndirectFreekicksOrder: raw.corners_and_indirect_freekicks_order,
      cornersAndIndirectFreekicksText: raw.corners_and_indirect_freekicks_text,
      directFreekicksOrder: raw.direct_freekicks_order,
      directFreekicksText: raw.direct_freekicks_text,
      penaltiesOrder: raw.penalties_order,
      penaltiesText: raw.penalties_text,
      expectedGoalsPer90: raw.expected_goals_per_90,
      savesPer90: raw.saves_per_90,
      expectedAssistsPer90: raw.expected_assists_per_90,
      expectedGoalInvolvementsPer90: raw.expected_goal_involvements_per_90,
      expectedGoalsConcededPer90: raw.expected_goals_conceded_per_90,
      goalsConcededPer90: raw.goals_conceded_per_90,
      nowCostRank: raw.now_cost_rank,
      nowCostRankType: raw.now_cost_rank_type,
      formRank: raw.form_rank,
      formRankType: raw.form_rank_type,
      pointsPerGameRank: raw.points_per_game_rank,
      pointsPerGameRankType: raw.points_per_game_rank_type,
      selectedRank: raw.selected_rank,
      selectedRankType: raw.selected_rank_type,
      startsPer90: raw.starts_per_90,
      cleanSheetsPer90: raw.clean_sheets_per_90,
    });

    return result.success
      ? right(result.data)
      : left(`Invalid element domain model: ${result.error.message}`);
  } catch (error) {
    return left(
      `Failed to transform element data: ${error instanceof Error ? error.message : String(error)}`,
    );
  }
};
