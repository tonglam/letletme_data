// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Event {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  event_id                  Int       @unique
  name                      String
  deadline_time             DateTime
  release_time              DateTime?
  average_entry_score       Int?
  finished                  Boolean?
  data_checked              Boolean?
  highest_scoring_entry     Int?
  deadline_time_epoch       BigInt?
  deadline_time_game_offset Int?
  highest_score             Int?
  is_previous               Boolean?
  is_current                Boolean?
  is_next                   Boolean?
  cup_leagues_created       Boolean?
  h2h_ko_matches_created    Boolean?
  can_enter                 Boolean?
  can_manage                Boolean?
  released                  Boolean?
  ranked_count              Int?
  chip_plays                Json[]
  most_selected             Int?
  most_transferred_in       Int?
  top_element               Int?
  top_element_info          Json?
  transfers_made            Int?
  most_captained            Int?
  most_vice_captained       Int?
  created_at                DateTime  @default(now())

  playerStat         PlayerStat[]
  playerValue        PlayerValue[]
  event_fixtures     EventFixture[]
  eventLive          EventLive?
  entryEventPick     EntryEventPick[]
  entryEventTransfer EntryEventTransfer[]

  @@map("event")
}

model Phase {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phase_id    Int      @unique
  name        String?
  start_event Int?
  stop_event  Int?
  created_at  DateTime @default(now())

  @@map("phase")
}

model Team {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  team_id    Int      @unique
  team_code  Int
  name       String?
  short_name String?
  created_at DateTime @default(now())

  eventFixtureTeamA EventFixture[] @relation("TeamA")
  eventFixtureTeamH EventFixture[] @relation("TeamH")
  player            Player[]
  playerStat        PlayerStat[]

  @@map("team")
}

model Player {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  element_id   Int      @unique
  element_code Int
  price        Int?
  start_price  Int?
  element_type Int
  first_name   String?
  second_name  String?
  web_name     String
  team         Team     @relation(fields: [team_id], references: [team_id])
  team_id      Int
  created_at   DateTime @default(now())

  eventLive   EventLive[]
  playerStat  PlayerStat[]
  playerValue PlayerValue[]

  @@map("player")
}

model PlayerStat {
  id                                   String    @id @default(auto()) @map("_id") @db.ObjectId
  event                                Event     @relation(fields: [event_id], references: [event_id])
  event_id                             Int
  element                              Player    @relation(fields: [element_id], references: [element_id])
  element_id                           Int
  can_transact                         Boolean?
  chance_of_playing_next_round         Int?
  chance_of_playing_this_round         Int?
  cost_change_event                    Int?
  cost_change_event_fall               Int?
  cost_change_start                    Int?
  cost_change_start_fall               Int?
  dreamteam_count                      Int?
  element_type                         Int
  ep_next                              String?
  ep_this                              String?
  event_points                         Int?
  form                                 String?
  in_dreamteam                         Boolean?
  news                                 String?
  news_added                           DateTime?
  now_cost                             Int?
  photo                                String?
  points_per_game                      String?
  selected_by_percent                  Int?
  special                              Boolean?
  squad_number                         Int?
  status                               String?
  team                                 Team      @relation(fields: [team_id], references: [team_id])
  team_id                              Int
  total_points                         Int?
  transfers_in                         Int?
  transfers_in_event                   Int?
  transfers_out                        Int?
  transfers_out_event                  Int?
  value_form                           String?
  value_season                         String?
  minutes                              Int?
  goals_scored                         Int?
  assists                              Int?
  clean_sheets                         Int?
  goals_conceded                       Int?
  own_goals                            Int?
  penalties_saved                      Int?
  penalties_missed                     Int?
  yellow_cards                         Int?
  red_cards                            Int?
  saves                                Int?
  bonus                                Int?
  bps                                  Int?
  influence                            String?
  creativity                           String?
  threat                               String?
  ict_index                            String?
  starts                               Int?
  expected_goals                       String?
  expected_assists                     String?
  expected_goal_involvements           String?
  expected_goals_conceded              String?
  influence_rank                       Int?
  influence_rank_type                  Int?
  creativity_rank                      Int?
  creativity_rank_type                 Int?
  threat_rank                          Int?
  threat_rank_type                     Int?
  ict_index_rank                       Int?
  ict_index_rank_type                  Int?
  corners_and_indirect_freekicks_order Int?
  corners_and_indirect_freekicks_text  String?
  direct_freekicks_order               Int?
  direct_freekicks_text                String?
  penalties_order                      Int?
  penalties_text                       String?
  expected_goals_per_90                Int?
  saves_per_90                         Int?
  expected_assists_per_90              Int?
  expected_goal_involvements_per_90    Int?
  expected_goals_conceded_per_90       Int?
  goals_conceded_per_90                Int?
  now_cost_rank                        Int?
  now_cost_rank_type                   Int?
  form_rank                            Int?
  form_rank_type                       Int?
  points_per_game_rank                 Int?
  points_per_game_rank_type            Int?
  selected_rank                        Int?
  selected_rank_type                   Int?
  starts_per_90                        Int?
  clean_sheets_per_90                  Int?
  created_at                           DateTime  @default(now())
  update_at                            DateTime  @updatedAt

  @@map("player_stat")
}

enum PlayerValueChangeType {
  Start
  Rise
  Fall
}

model PlayerValue {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  element      Player                @relation(fields: [element_id], references: [element_id])
  element_id   Int
  element_type Int
  event        Event                 @relation(fields: [event_id], references: [event_id])
  event_id     Int
  value        Int
  last_value   Int?
  change_date  String?
  change_type  PlayerValueChangeType @default(Start)
  created_at   DateTime              @default(now())
  updated_at   DateTime              @updatedAt

  // @@unique([element_id, change_date], name: "unique_element_id_change_date")
  // @@index([element_type], name: "index_element_type")
  @@map("player_value")
}

model EventFixture {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  fixture_id             Int
  fixture_code           Int
  event                  Event    @relation(fields: [event_id], references: [event_id])
  event_id               Int
  finished               Boolean?
  finished_provisional   Boolean?
  kickoff_time           String
  minutes                Int?
  provisional_start_time Boolean?
  started                Boolean?
  teamA                  Team     @relation("TeamA", fields: [team_a], references: [team_id])
  team_a                 Int
  team_a_score           Int?
  teamH                  Team     @relation("TeamH", fields: [team_h], references: [team_id])
  team_h                 Int
  team_h_score           Int?
  stats                  Json?
  team_a_difficulty      Int?
  team_h_difficulty      Int?
  pulse_id               Int?
  created_at             DateTime @default(now())

  eventLiveExplain EventLiveExplain[]

  @@unique([fixture_id], name: "unique_fixture_id")
  @@unique([fixture_code], name: "unique_fixture_code")
  @@index([event_id], name: "index_event_id")
  @@map("event_fixture")
}

model EventLive {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  event            Event    @relation(fields: [event_id], references: [event_id])
  event_id         Int      @unique
  element          Player   @relation(fields: [element_id], references: [element_id])
  element_id       Int      @unique
  minutes          Int?
  goals_scored     Int?
  assists          Int?
  clean_sheets     Int?
  goals_conceded   Int?
  own_goals        Int?
  penalties_saved  Int?
  penalties_missed Int?
  yellow_cards     Int?
  red_cards        Int?
  saves            Int?
  bonus            Int?
  bps              Int?
  influence        Float?
  creativity       Float?
  threat           Float?
  ict_index        String?
  total_points     Int?
  in_dreamteam     Boolean?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@unique([event_id, element_id], name: "unique_event_id_element_id")
  @@map("event_live")
}

model EventLiveExplain {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  fixture    EventFixture @relation(fields: [fixture_id], references: [fixture_id])
  fixture_id Int
  stats      Json?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@map("event_live_explain")
}

model Entry {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  entry_id                      Int
  joined_time                   String?
  started_event                 Int?
  favourite_team                Int?
  player_first_name             String?
  player_last_name              String?
  player_region_id              Int?
  player_region_name            String?
  player_region_iso_code_short  String?
  player_region_iso_code_long   String?
  years_active                  Int?
  summary_overall_points        Int?
  summary_overall_rank          Int?
  summary_event_points          Int?
  summary_event_rank            Int?
  current_event                 Int?
  leagues                       Json?
  name                          String
  name_change_blocked           Boolean?
  entered_events                Int[]
  kit                           String?
  last_deadline_bank            Int?
  last_deadline_value           Int?
  last_deadline_total_transfers Int?
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  entryEventPick     EntryEventPick[]
  entryEventTransfer EntryEventTransfer[]

  @@unique([entry_id], name: "unique_entry_id")
  @@index([name], name: "index_name")
  @@map("entry")
}

model EntryEventPick {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  entry          Entry    @relation(fields: [entry_id], references: [entry_id])
  entry_id       Int
  event          Event    @relation(fields: [event_id], references: [event_id])
  event_id       Int
  active_chip    String?
  automatic_subs Json?
  entry_history  Json?
  picks          Json?
  created_at     DateTime @default(now())

  @@unique([entry_id, event_id], name: "unique_entry_id_event_id")
  @@map("entry_event_pick")
}

model EntryEventTransfer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  entry      Entry    @relation(fields: [entry_id], references: [entry_id])
  entry_id   Int
  event      Event    @relation(fields: [event_id], references: [event_id])
  event_id   Int
  transfers  Json?
  created_at DateTime @default(now())

  @@unique([entry_id, event_id], name: "unique_entry_id_event_id")
  @@map("entry_event_transfer")
}
