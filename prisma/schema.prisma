// Schema for Fantasy Premier League (FPL) data management system
// Database: PostgreSQL with Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                     Int      @id
  name                   String
  deadlineTime           String   @map("deadline_time")
  deadlineTimeEpoch      Int      @default(0) @map("deadline_time_epoch")
  deadlineTimeGameOffset Int      @default(0) @map("deadline_time_game_offset")
  releaseTime            String?  @map("release_time")
  averageEntryScore      Int      @default(0) @map("average_entry_score")
  finished               Boolean  @default(false)
  dataChecked            Boolean  @default(false) @map("data_checked")
  highestScore           Int      @default(0) @map("highest_score")
  highestScoringEntry    Int      @default(0) @map("highest_scoring_entry")
  isPrevious             Boolean  @default(false) @map("is_previous")
  isCurrent              Boolean  @default(false) @map("is_current")
  isNext                 Boolean  @default(false) @map("is_next")
  cupLeaguesCreated      Boolean  @default(false) @map("cup_leagues_created")
  h2hKoMatchesCreated    Boolean  @default(false) @map("h2h_ko_matches_created")
  rankedCount            Int      @default(0) @map("ranked_count")
  chipPlays              Json?    @map("chip_plays")
  mostSelected           Int?     @map("most_selected")
  mostTransferredIn      Int?     @map("most_transferred_in")
  mostCaptained          Int?     @map("most_captained")
  mostViceCaptained      Int?     @map("most_vice_captained")
  topElement             Int?     @map("top_element")
  topElementInfo         Json?    @map("top_element_info")
  transfersMade          Int      @default(0) @map("transfers_made")
  createdAt              DateTime @default(now()) @map("created_at")

  @@map("events")
}

model Phase {
  id           Int      @id
  name         String
  startEvent   Int      @map("start_event")
  stopEvent    Int      @map("stop_event")
  highestScore Int?     @map("highest_score")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("phases")
}

model Team {
  id                  Int      @id
  code                Int
  name                String
  shortName           String   @map("short_name")
  strength            Int
  strengthOverallHome Int      @map("strength_overall_home")
  strengthOverallAway Int      @map("strength_overall_away")
  strengthAttackHome  Int      @map("strength_attack_home")
  strengthAttackAway  Int      @map("strength_attack_away")
  strengthDefenceHome Int      @map("strength_defence_home")
  strengthDefenceAway Int      @map("strength_defence_away")
  pulseId             Int      @map("pulse_id")
  played              Int      @default(0)
  position            Int      @default(0)
  points              Int      @default(0)
  form                String?
  win                 Int      @default(0)
  draw                Int      @default(0)
  loss                Int      @default(0)
  teamDivision        String?  @map("team_division")
  unavailable         Boolean  @default(false)
  createdAt           DateTime @default(now()) @map("created_at")

  @@map("teams")
}

enum ElementType {
  GKP @map("1")
  DEF @map("2")
  MID @map("3")
  FWD @map("4")
}

model Player {
  element     Int         @id
  elementCode Int         @unique @map("element_code")
  price       Int         @default(0)
  startPrice  Int         @default(0) @map("start_price")
  elementType ElementType @map("element_type")
  firstName   String?     @map("first_name")
  secondName  String?     @map("second_name")
  webName     String      @map("web_name")
  teamId      Int         @map("team_id")
  createdAt   DateTime    @default(now()) @map("created_at")

  @@map("players")
}

enum ValueChangeType {
  Start
  Rise
  Fall
}

model PlayerValue {
  id          String          @id @default(uuid()) @db.Uuid
  elementId   Int             @map("element_id")
  elementType Int             @map("element_type")
  eventId     Int             @map("event_id")
  value       Int
  /// Format: yyyyMMdd
  changeDate  String          @map("change_date") @db.Char(8)
  changeType  ValueChangeType @map("change_type")
  lastValue   Int             @default(0) @map("last_value")
  createdAt   DateTime        @default(now()) @map("created_at")

  @@index([elementId], name: "idx_player_values_element_id")
  @@index([changeDate], name: "idx_player_values_change_date")
  @@index([eventId], name: "idx_player_values_event_id")
  @@index([elementType], name: "idx_player_values_element_type")
  @@map("player_values")
}

model PlayerStat {
  id        String @id @default(uuid()) @db.Uuid
  eventId   Int    @map("event_id")
  elementId Int    @map("element_id")
  teamId    Int    @map("team_id")

  // Performance metrics
  form                     Float?   @map("form")
  influence                Float?   @map("influence")
  creativity               Float?   @map("creativity")
  threat                   Float?   @map("threat")
  ictIndex                 Float?   @map("ict_index")
  expectedGoals            Decimal? @map("expected_goals") @db.Decimal(10, 2)
  expectedAssists          Decimal? @map("expected_assists") @db.Decimal(10, 2)
  expectedGoalInvolvements Decimal? @map("expected_goal_involvements") @db.Decimal(10, 2)
  expectedGoalsConceded    Decimal? @map("expected_goals_conceded") @db.Decimal(10, 2)

  // Match statistics
  minutes        Int? @map("minutes")
  goalsScored    Int? @map("goals_scored")
  assists        Int? @map("assists")
  cleanSheets    Int? @map("clean_sheets")
  goalsConceded  Int? @map("goals_conceded")
  ownGoals       Int? @map("own_goals")
  penaltiesSaved Int? @map("penalties_saved")

  // Additional statistics
  yellowCards Int? @default(0) @map("yellow_cards")
  redCards    Int? @default(0) @map("red_cards")
  saves       Int? @default(0) @map("saves")
  bonus       Int? @default(0) @map("bonus")
  bps         Int? @default(0) @map("bps")
  starts      Int? @default(0) @map("starts")

  // Rank statistics
  influenceRank      Int? @map("influence_rank")
  influenceRankType  Int? @map("influence_rank_type")
  creativityRank     Int? @map("creativity_rank")
  creativityRankType Int? @map("creativity_rank_type")
  threatRank         Int? @map("threat_rank")
  threatRankType     Int? @map("threat_rank_type")
  ictIndexRank       Int? @map("ict_index_rank")
  ictIndexRankType   Int? @map("ict_index_rank_type")

  // Per 90 statistics
  expectedGoalsPer90            Decimal? @map("expected_goals_per_90") @db.Decimal(10, 2)
  savesPer90                    Decimal? @map("saves_per_90") @db.Decimal(10, 2)
  expectedAssistsPer90          Decimal? @map("expected_assists_per_90") @db.Decimal(10, 2)
  expectedGoalInvolvementsPer90 Decimal? @map("expected_goal_involvements_per_90") @db.Decimal(10, 2)
  expectedGoalsConcededPer90    Decimal? @map("expected_goals_conceded_per_90") @db.Decimal(10, 2)
  goalsConcededPer90            Decimal? @map("goals_conceded_per_90") @db.Decimal(10, 2)
  startsPer90                   Decimal? @map("starts_per_90") @db.Decimal(10, 2)
  cleanSheetsPer90              Decimal? @map("clean_sheets_per_90") @db.Decimal(10, 2)

  // Set piece info
  cornersAndIndirectFreekicksOrder Int?    @map("corners_and_indirect_freekicks_order")
  cornersAndIndirectFreekicksText  String? @map("corners_and_indirect_freekicks_text")
  directFreekicksOrder             Int?    @map("direct_freekicks_order")
  directFreekicksText              String? @map("direct_freekicks_text")
  penaltiesOrder                   Int?    @map("penalties_order")
  penaltiesText                    String? @map("penalties_text")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([eventId, elementId], name: "unique_event_element")
  @@index([elementId], name: "idx_player_stats_element_id")
  @@index([teamId], name: "idx_player_stats_team_id")
  @@index([eventId], name: "idx_player_stats_event_id")
  @@map("player_stats")
}

model EventFixture {
  id                   String    @id @default(uuid()) @db.Uuid
  code                 Int
  event                Int
  kickoffTime          DateTime? @map("kickoff_time") @db.Timestamptz
  started              Boolean   @default(false)
  finished             Boolean   @default(false)
  provisionalStartTime Boolean   @default(false) @map("provisional_start_time")
  finishedProvisional  Boolean   @default(false) @map("finished_provisional")
  minutes              Int       @default(0)
  teamH                Int?      @map("team_h")
  teamHDifficulty      Int       @default(0) @map("team_h_difficulty")
  teamHScore           Int       @default(0) @map("team_h_score")
  teamA                Int?      @map("team_a")
  teamADifficulty      Int       @default(0) @map("team_a_difficulty")
  teamAScore           Int       @default(0) @map("team_a_score")
  createdAt            DateTime  @default(now()) @map("created_at")

  @@index([event, teamH], name: "idx_home")
  @@index([event, teamA], name: "idx_away")
  @@map("event_fixtures")
}

// model EventLive {
//   id           String   @id @default(uuid()) @map("id")
//   event        Event    @relation(fields: [eventId], references: [eventId])
//   eventId      Int      @unique @map("event_id")
//   element      Player   @relation(fields: [elementId], references: [elementId])
//   elementId    Int      @map("element_id")
//   stats        Json     @map("stats") // Live performance statistics
//   explanations Json?    @map("explanations") // Bonus point calculations
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @updatedAt @map("updated_at")

//   @@unique([eventId, elementId], name: "unique_event_element_live")
//   @@index([elementId], name: "idx_event_live_element_id")
//   @@map("event_lives")
// }

// model EventFixture {
//   id                   String   @id @default(uuid()) @map("id")
//   event                Event    @relation(fields: [eventId], references: [eventId])
//   eventId              Int      @map("event_id")
//   fixtureId            Int      @unique @map("fixture_id")
//   fixtureCode          Int      @unique @map("fixture_code")
//   finished             Boolean  @default(false) @map("finished")
//   finishedProvisional  Boolean  @default(false) @map("finished_provisional")
//   kickoffTime          DateTime @map("kickoff_time")
//   minutes              Int      @default(0) @map("minutes")
//   provisionalStartTime Boolean  @default(false) @map("provisional_start_time")
//   started              Boolean  @default(false) @map("started")
//   teamA                Team     @relation("TeamA", fields: [teamAId], references: [teamId])
//   teamAId              Int      @map("team_a")
//   teamAScore           Int?     @map("team_a_score")
//   teamH                Team     @relation("TeamH", fields: [teamHId], references: [teamId])
//   teamHId              Int      @map("team_h")
//   teamHScore           Int?     @map("team_h_score")
//   stats                Json?    @map("stats") // Match statistics
//   createdAt            DateTime @default(now()) @map("created_at")
//   updatedAt            DateTime @updatedAt @map("updated_at")

//   @@index([eventId], name: "idx_event_fixtures_event_id")
//   @@index([teamAId], name: "idx_event_fixtures_team_a")
//   @@index([teamHId], name: "idx_event_fixtures_team_h")
//   @@map("event_fixtures")
// }

// model Entry {
//   id                       String  @id @default(uuid()) @map("id")
//   entryId                  Int     @unique @map("entry_id") // Official team ID
//   joinedTime               String? @map("joined_time")
//   startedEvent             Int?    @map("started_event") // First active gameweek
//   favouriteTeam            Int?    @map("favourite_team")
//   playerFirstName          String? @map("player_first_name")
//   playerLastName           String? @map("player_last_name")
//   playerRegionId           Int?    @map("player_region_id")
//   playerRegionName         String? @map("player_region_name")
//   playerRegionIsoCodeShort String? @map("player_region_iso_code_short")
//   playerRegionIsoCodeLong  String? @map("player_region_iso_code_long")
//   name                     String  @map("name") // Team name
//   nameChangeBlocked        Boolean @default(false) @map("name_change_blocked")

//   // League performance
//   leagueType                String? @map("league_type") // 's' for standard, 'x' for custom
//   leagueScoring             String? @map("league_scoring") // 'c' for classic
//   leagueRank                Int?    @map("league_rank")
//   leagueRankCount           Int?    @map("league_rank_count")
//   leagueEntryRank           Int?    @map("league_entry_rank")
//   leagueEntryLastRank       Int?    @map("league_entry_last_rank")
//   leagueEntryPercentileRank Int?    @map("league_entry_percentile_rank")

//   // Season performance
//   summaryOverallPoints       Int? @map("summary_overall_points")
//   summaryOverallRank         Int? @map("summary_overall_rank")
//   summaryEventPoints         Int? @map("summary_event_points")
//   summaryEventRank           Int? @map("summary_event_rank")
//   currentEvent               Int? @map("current_event")
//   lastDeadlineBank           Int? @map("last_deadline_bank") // Team value in bank
//   lastDeadlineValue          Int? @map("last_deadline_value") // Total team value
//   lastDeadlineTotalTransfers Int? @map("last_deadline_total_transfers")

//   enteredEvents Int[] @map("entered_events") // Gameweeks participated in
//   kit           Json? @map("kit") // Team kit configuration

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   entryEventPicks     EntryEventPick[] // Weekly team selections
//   entryEventTransfers EntryEventTransfer[] // Weekly transfers

//   @@index([name], name: "idx_entries_name")
//   @@map("entries")
// }

// model EntryEventPick {
//   id      String @id @default(uuid()) @map("id")
//   entry   Entry  @relation(fields: [entryId], references: [entryId])
//   entryId Int    @map("entry_id")
//   event   Event  @relation(fields: [eventId], references: [eventId])
//   eventId Int    @map("event_id")

//   picks         Json    @map("picks") // Selected players and positions
//   activeChip    String? @map("active_chip") // Chip used (if any)
//   automaticSubs Json?   @map("automatic_subs") // Auto-substitutions

//   points        Int @default(0) @map("points") // Points scored
//   pointsOnBench Int @default(0) @map("points_on_bench") // Points on bench

//   bank  Int @default(0) @map("bank") // Team value in bank
//   value Int @default(0) @map("value") // Total team value

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@unique([entryId, eventId], name: "unique_entry_event_pick")
//   @@index([eventId], name: "idx_entry_event_picks_event_id")
//   @@map("entry_event_picks")
// }

// model EntryEventTransfer {
//   id      String @id @default(uuid()) @map("id")
//   entry   Entry  @relation(fields: [entryId], references: [entryId])
//   entryId Int    @map("entry_id")
//   event   Event  @relation(fields: [eventId], references: [eventId])
//   eventId Int    @map("event_id")

//   transfers Json   @map("transfers") // Transfer details
//   cost      Int    @default(0) @map("cost") // Points cost
//   status    String @default("confirmed") @map("status")
//   limit     Int    @default(1) @map("limit") // Free transfers allowed
//   made      Int    @default(0) @map("made") // Transfers made

//   bank  Int @default(0) @map("bank") // Team value in bank
//   value Int @default(0) @map("value") // Total team value

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@unique([entryId, eventId], name: "unique_entry_event_transfer")
//   @@index([eventId], name: "idx_entry_event_transfers_event_id")
//   @@map("entry_event_transfers")
// }
